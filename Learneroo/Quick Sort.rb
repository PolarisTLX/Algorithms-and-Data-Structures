https://www.learneroo.com/modules/4/nodes/43

Simple Quick Sort

Solved this in one step, which was easier then the weird incremental step output the challange wanted to be printed



def do_stuff(ar)
	pivot = ar[0]
	before = []
	after = []

	ar[1..-1].each do |element|
		before << element if element <= pivot
		after << element if element > pivot
	end

	if before.length > 1
		do_stuff(before)
	else
		print before[0], " " unless before[0] == nil
	end

	print pivot, " "

	if after.length > 1
		do_stuff(after)
	else
		print after[0], " " unless after[0] == nil
	end
end

t = gets.to_i
for i in 1..t do
		n=gets
		ar = gets.strip.split.map {|i| i.to_i}
		do_stuff(ar)
		print "\n"
end




Input
3
7
5 8 1 3 7 10 2
9
9 8 6 7 3 5 4 1 2
100
406 157 415 318 472 46 252 187 364 481 450 90 390 35 452 74 196 312 142 160 143 220 483 392 443 488 79 234 68 150 356 496 69 88 177 12 288 120 222 270 441 422 103 321 65 316 448 331 117 183 184 128 323 141 467 31 172 48 95 359 239 209 398 99 440 171 86 233 293 162 121 61 317 52 54 273 30 226 421 64 204 444 418 275 263 108 10 149 497 20 97 136 139 200 266 238 493 22 17 39


Your Output  (SORTED IN ONE STEP)
1 2 3 5 7 8 10
1 2 3 4 5 6 7 8 9
10 12 17 20 22 30 31 35 39 46 48 52 54 61 64 65 68 69 74 79 86 88 90 95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150 157 160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239 252 263 266 270 273 275 288 293 312 316 317 318 321 323 331 356 359 364 390 392 398 406 415 418 421 422 440 441 443 444 448 450 452 467 472 481 483 488 493 496 497


Correct Output
2 3
1 2 3
7 8 10
1 2 3 5 7 8 10
1 2
4 5
1 2 3 4 5
1 2 3 4 5 6 7
1 2 3 4 5 6 7 8
1 2 3 4 5 6 7 8 9
17 20 22
17 20 22 30
17 20 22 30 31
10 12 17 20 22 30 31
10 12 17 20 22 30 31 35 39
52 54
52 54 61 64
48 52 54 61 64
48 52 54 61 64 65
48 52 54 61 64 65 68 69
86 88
79 86 88
48 52 54 61 64 65 68 69 74 79 86 88
97 99
95 97 99
108 117
95 97 99 103 108 117
136 139
136 139 141
121 128 136 139 141
95 97 99 103 108 117 120 121 128 136 139 141
149 150
143 149 150
95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150
48 52 54 61 64 65 68 69 74 79 86 88 90 95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150
10 12 17 20 22 30 31 35 39 46 48 52 54 61 64 65 68 69 74 79 86 88 90 95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150
162 171
162 171 172
183 184
162 171 172 177 183 184
160 162 171 172 177 183 184
200 204
200 204 209
226 233
222 226 233
238 239
222 226 233 234 238 239
200 204 209 220 222 226 233 234 238 239
196 200 204 209 220 222 226 233 234 238 239
160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239
263 266
273 275
263 266 270 273 275
263 266 270 273 275 288 293
316 317
263 266 270 273 275 288 293 312 316 317
160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239 252 263 266 270 273 275 288 293 312 316 317
323 331
321 323 331
321 323 331 356 359
392 398
390 392 398
321 323 331 356 359 364 390 392 398
160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239 252 263 266 270 273 275 288 293 312 316 317 318 321 323 331 356 359 364 390 392 398
10 12 17 20 22 30 31 35 39 46 48 52 54 61 64 65 68 69 74 79 86 88 90 95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150 157 160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239 252 263 266 270 273 275 288 293 312 316 317 318 321 323 331 356 359 364 390 392 398
418 421
418 421 422 440
418 421 422 440 441
444 448
418 421 422 440 441 443 444 448
452 467
418 421 422 440 441 443 444 448 450 452 467
493 496 497
488 493 496 497
483 488 493 496 497
481 483 488 493 496 497
418 421 422 440 441 443 444 448 450 452 467 472 481 483 488 493 496 497
415 418 421 422 440 441 443 444 448 450 452 467 472 481 483 488 493 496 497
10 12 17 20 22 30 31 35 39 46 48 52 54 61 64 65 68 69 74 79 86 88 90 95 97 99 103 108 117 120 121 128 136 139 141 142 143 149 150 157 160 162 171 172 177 183 184 187 196 200 204 209 220 222 226 233 234 238 239 252 263 266 270 273 275 288 293 312 316 317 318 321 323 331 356 359 364 390 392 398 406 415 418 421 422 440 441 443 444 448 450 452 467 472 481 483 488 493 496 497





EDIT: WAY OF USING SO IT RETURNS A COMPLETE ARRAY THAT CAN BE USED (NOT JUST PRINT TO THE SCREEN)

def do_stuff(ar, final=[])
	pivot = ar[0]
	before = []
	after = []

	ar[1..-1].each do |element|
		before << element if element <= pivot
		after << element if element > pivot
	end

	if before.length > 1
		do_stuff(before, final)
	else
		# print before[0], " " unless before[0] == nil
		final << before[0] unless before[0] == nil
	end

	# print pivot, " "
	final << pivot

	if after.length > 1
		do_stuff(after, final)
	else
		# print after[0], " " unless after[0] == nil
		final << after[0] unless after[0] == nil
	end

  # print final
  final
end

print do_stuff([5, 8, 1, 3, 7, 10, 2], [])
